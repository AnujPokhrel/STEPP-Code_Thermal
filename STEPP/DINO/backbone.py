#
# Copyright (c) Mark Hamilton. All rights reserved.
# Copyright (c) 2022-2024, ETH Zurich, Piotr Libera, Jonas Frey, Matias Mattamala.
# All rights reserved. Licensed under the MIT license.
# See LICENSE file in the project root for details.
#
#
import torch
from torch import nn
import numpy as np
from abc import ABC, abstractmethod
 

def get_backbone(cfg):
    """
    Returns a selected DINOv2VIT backbone.
    After implementing the Backbone class for your backbone, add it to be returned from this function with a desired named.
    The backbone can then be used by specifying its name in the STEGO configuration file.
    """
    if not hasattr(cfg, "backbone"):
        raise ValueError("Could not find 'backbone' option in the config file. Please check it")

    if cfg.backbone == "dinov2":
        return Dinov2ViT(cfg)
    else:
        raise ValueError("Backbone {} unavailable".format(cfg.backbone))


class Backbone(ABC, nn.Module):
    """
    Base class to provide an interface for new STEGO backbones.

    To add a new backbone for use in STEGO, add a new implementation of this class.
    """

    vit_name_long_to_short = {
        "vit_tiny": "T",
        "vit_small": "S",
        "vit_base": "B",
        "vit_large": "L",
        "vit_huge": "H",
        "vit_giant": "G",
    }

    # Initialize the backbone
    @abstractmethod
    def __init__(self, cfg):
        super().__init__()

    # Return the size of features generated by the backbone
    @abstractmethod
    def get_output_feat_dim(self) -> int:
        pass

    # Generate features for the given image
    @abstractmethod
    def forward(self, img):
        pass

    # Returh a name that identifies the type of the backbone
    @abstractmethod
    def get_backbone_name(self):
        pass


class Dinov2ViT(Backbone):
    def __init__(self, cfg):
        super().__init__(cfg)
        self.cfg = cfg
        self.backbone_type = self.cfg.backbone_type
        self.patch_size = 14
        if self.backbone_type == "vit_small":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vits14", verbose=False)
        elif self.backbone_type == "vit_base":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitb14", verbose=False)
        elif self.backbone_type == "vit_large":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitl14", verbose=False)
        elif self.backbone_type == "vit_giant":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitg14", verbose=False)
        elif self.backbone_type == "vit_small_reg":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vits14_reg", verbose=False)
        elif self.backbone_type == "vit_base_reg":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitb14_reg", verbose=False)
        elif self.backbone_type == "vit_large_reg":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitl14_reg", verbose=False)
        elif self.backbone_type == "vit_giant_reg":
            self.model = torch.hub.load("facebookresearch/dinov2", "dinov2_vitg14_reg", verbose=False)
        else:
            raise ValueError("Model type {} unavailable".format(cfg.backbone_type))

        for p in self.model.parameters():
            p.requires_grad = False
        self.model.eval().cuda()
        self.dropout = torch.nn.Dropout2d(p=np.clip(self.cfg.dropout_p, 0.0, 1.0))

        if self.backbone_type == "vit_small":
            self.n_feats = 384
        elif self.backbone_type == "vit_base":
            self.n_feats = 768
        elif self.backbone_type == "vit_large":
            self.n_feats = 1024
        elif self.backbone_type == "vit_giant":
            self.n_feats = 1536
        else:
            self.n_feats = 768

    def get_output_feat_dim(self):
        return self.n_feats

    def forward(self, img):
        self.model.eval()
        with torch.no_grad():
            assert img.shape[2] % self.patch_size == 0
            assert img.shape[3] % self.patch_size == 0

            # get selected layer activations
            feat = self.model.get_intermediate_layers(img)[0]

            feat_h = img.shape[2] // self.patch_size
            feat_w = img.shape[3] // self.patch_size

            image_feat = feat[:, :, :].reshape(feat.shape[0], feat_h, feat_w, -1).permute(0, 3, 1, 2)

        if self.cfg.dropout_p > 0:
            return self.dropout(image_feat)
        else:
            return image_feat

    def get_backbone_name(self):
        return "DINOv2-" + Backbone.vit_name_long_to_short[self.backbone_type] + "-" + str(self.patch_size)